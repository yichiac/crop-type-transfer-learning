// Cropland mask generation
// Take Sanjiang Plain (SJ) as an example

var id = 1
var fenqu = ee.FeatureCollection("users/nanshany1993/cropNE/vectors/NE84-fenqu")
var aoi = fenqu.filter(ee.Filter.eq('Id',id))

// Step 1: Construct feature candicates from Sentinel-2 images
var year = 2018
var bands = ee.List(['red2','swir1','swir2','NDVI','EVI','LSWI','NDSVI','NDTI','RENDVI','REP'])  // 10 index
var region = aoi.geometry().buffer(2000)
var start = ee.Date.fromYMD(year,4,20)
var end =  ee.Date.fromYMD(year,10,21)
var s2 = ee.ImageCollection("COPERNICUS/S2")
  .filterBounds(region)
  .filterDate(start,end)
  .map(sentinel2toa)
  .map(addVariables)
  .map(cloudMask)
var s2filtered = s2.select(bands)

// Seasonal metrics:
// Median composite
var start = ee.Date('2018-04-20').getRelative('day', 'year')
var advances = ee.List.sequence(0,120,60)
var seasonalS2 = advances.map(function(adv) {
  var startDoy = start.add(adv)
  return s2filtered.filter(ee.Filter.dayOfYear(startDoy, startDoy.add(60))).median()
                  .set('startDoy',startDoy);
});
var seasonals = ee.Image(seasonalS2.iterate(mergeBands, ee.Image([])))

// Annual metrics:
//  mean, min, max, std, percentile(5,25,75,95), range
var s2Inseason = s2filtered.filter(ee.Filter.dayOfYear(start, start.add(60*3)))
var min = s2Inseason.reduce(ee.Reducer.min())
var max = s2Inseason.reduce(ee.Reducer.max())
var mean = s2Inseason.reduce(ee.Reducer.mean())
var std = s2Inseason.reduce(ee.Reducer.stdDev())
var percentile = s2Inseason.reduce(ee.Reducer.percentile([5,25,50,75,95]))
var range = s2Inseason.reduce(ee.Reducer.percentile([95]))
              .subtract(s2Inseason.reduce(ee.Reducer.percentile([5])))
var annuals = min.addBands(max).addBands(mean).addBands(std).addBands(percentile).addBands(range)

// GLCM texture
// Compute the gray-level co-occurrence matrix (GLCM)
// For a complete reference on the outputs, see Haralick et al. (1973) and Conners et al. (1984).
// '_asm','_contrast','_corr','_var','_idm','_savg','_svar','_sent','_ent','_dvar','_dent','_imcorr1','_imcorr2','_maxcorr','_diss','_inertia','_shade','_prom'
var NDVIpre = s2filtered.filter(ee.Filter.dayOfYear(start, start.add(60))).select('NDVI')
  .median().rename('NDVIpre')
var NDVIpeak = s2filtered.filter(ee.Filter.dayOfYear(start.add(60), start.add(120))).select('NDVI')
  .median().rename('NDVIpeak')
var NDVIpost = s2filtered.filter(ee.Filter.dayOfYear(start.add(120), start.add(180))).select('NDVI')
  .median().rename('NDVIpost')
var glcms = NDVIpre.addBands(NDVIpeak).addBands(NDVIpost)
  .multiply(10000).uint16()
  .glcmTexture({size: 7})

// merge all
// seansonals  10*3=30
// annuals 10*10=100
// glcms 18*3=54
// in sum 184
var finalImage = seasonals.addBands(annuals).addBands(glcms).addBands(elevation).clip(region)  


// Step 2: Train the classifier using the training samples and selected features
// trainTables is the training dataset, which contains the land cover type and Sentinel-2 features of each training sample
var trainTables = ee.FeatureCollection("users/nanshany1993/CDL/tables/cropland/croplandTable_V1_2018")
var trainTable = trainTables.filterBounds(aoi)
// train the classifier
// Optimal features were selected via a two-step feature selection procedure
var features = ['NDVI', 'NDVI_stdDev', 'NDVI_mean', 'EVI_stdDev', 'NDVI_p95', 'REP_p95', 'NDVI_p5', 'REP_p75', 'EVI_p50', 'NDTI_mean', 'RENDVI_2', 'NDTI', 'swir1_stdDev']
var rf = ee.Classifier.randomForest({
  numberOfTrees: 200,
  minLeafPopulation: 1, 
  seed: 999})
var classifier = rf.train({
  features:trainTable,
  classProperty:'crop',
  inputProperties:features,
})

// Step 3: classify the image with trained classifier and output
var classified = finalImage.select(features).classify(classifier).uint8()
var label = 'cropland_' + fenqu_id.toString()
Export.image.toAsset({
  image: classified,
  description: label,
  assetId: 'users/nanshany1993/CDL/images/'+label,
  scale: 10,
  region: region,  
  maxPixels : 1e13
});

//////////////// Functions //////////////////////////////////////////
// rename Sentinel-2 bands
// set necessary properties
function sentinel2toa (img){
  return img.select(
                      ['B1','B2','B3','B4','B5','B6','B7','B8','B8A','B9','B10', 'B11','B12','QA60']
                      ,['aerosol', 'blue', 'green', 'red','red1','red2','red3','nir','red4','h2o', 'cirrus','swir1', 'swir2','QA60']
                    )
                    .divide(10000).toDouble()
                    .set('solar_azimuth',img.get('MEAN_SOLAR_AZIMUTH_ANGLE'))
                    .set('solar_zenith',img.get('MEAN_SOLAR_ZENITH_ANGLE') )
                    .set('system:time_start',img.get('system:time_start'));
}

// function to get cloud score
// simply the cloud_and_shadow_mask
function cloudMask(toa) {
  // authors: Matt Hancher, Chris Hewig and Ian Housman
  
  function rescale(img, thresholds) {
    return img.subtract(thresholds[0]).divide(thresholds[1] - thresholds[0]);
  }
  
  // Compute several indicators of cloudyness and take the minimum of them.
  var score = ee.Image(1);
  
  //Clouds are reasonably bright
  score = score.min(rescale(toa.select(['blue']), [0.1, 0.5]));
  score = score.min(rescale(toa.select(['aerosol']), [0.1, 0.3]));
  score = score.min(rescale(toa.select(['aerosol']).add(toa.select(['cirrus'])), [0.15, 0.2]));
  score = score.min(rescale(toa.select(['red']).add(toa.select(['green'])).add(toa.select('blue')), [0.2, 0.8]));

  //Clouds are moist
  var ndmi = toa.normalizedDifference(['red4','swir1']);
  score=score.min(rescale(ndmi, [-0.1, 0.1]));
  
  // However, clouds are not snow.
  var ndsi = toa.normalizedDifference(['green', 'swir1']);
  score=score.min(rescale(ndsi, [0.8, 0.6]));
  
  // a (somewhat arbitrary) threshold 
  var cloudScoreThreshold = 0.2;
  var cloud = score.gt(cloudScoreThreshold);
  
  var mask = cloud.eq(0);
  return toa.updateMask(mask);
} 

// Use this function to add several indices to Sentinel-2 imagery.
var addVariables = function(image) {
  var DOY = image.date().getRelative('day', 'year')
  var year = image.date().get('year')
  
  return image
    // Add a NDVI band.
    .addBands(image.normalizedDifference(['nir', 'red']).toDouble().rename('NDVI'))
    // Add a EVI band.
    .addBands(image.expression('2.5*((nir-red)/(nir+6*red-7.5*blue+1))', {
      'nir':image.select('nir'),
      'red':image.select('red'),
      'blue':image.select('blue')
    }).toDouble().rename('EVI'))
    // Add a GCVI: Green Chlorophyll Vegetation Index (Guan Kaiyu, Wang Sherrie)
    .addBands(image.expression('nir/green-1',{
      'nir': image.select('nir'),
      'green': image.select('green'),
    }).toDouble().rename('GCVI'))
    // Add a MSAVI2: Modified Soil-adjusted Vegetation Index (Qi et al. (1994b))
    .addBands(image.expression('1/2 * (2*nir + 1 - ((2*nir+1)**2 - 8*(nir-red))**(1/2))',{
      'nir': image.select('nir'),
      'red': image.select('red'),
    }).toDouble().rename('MSAVI2'))  
    
    // Add a LSWI band.
    .addBands(image.normalizedDifference(['nir','swir1']).toDouble().rename('LSWI'))
    // Add a NDWI band.
    .addBands(image.normalizedDifference(['green','nir']).toDouble().rename('NDWI'))
    // Add a NDSI band.
    .addBands(image.normalizedDifference(['green','swir1']).toDouble().rename('NDSI'))
    
    // Add NDSVI: normalized differential senescent vegetation index (Zhong,2014)
    .addBands(image.normalizedDifference(['swir1','red']).toDouble().rename('NDSVI'))
    // Add NDTI: normalized differential tillage index, relates to residue cover (Zhong,2014)
    .addBands(image.normalizedDifference(['swir1','swir2']).toDouble().rename('NDTI'))
    
    // Add S2 red-edge indices (Sen2-Agri)
    // RENDVI = (nir-red2)/(nir+red2)
    // REP = {705+35*(0.5*(red3+red)-red1)/(red2-red1)}/1000
    // PSRI = (red-blue)/red1
    // CRE = red1/nir
    .addBands(image.normalizedDifference(['nir','red2']).toDouble().rename('RENDVI'))
    
    .addBands(image.expression('(705+35*(0.5*(red3+red)-red1)/(red2-red1))/1000',{
      'red3' : image.select('red3'),
      'red2' : image.select('red2'),
      'red1' : image.select('red1'),
      'red' : image.select('red'),
    }).toDouble().rename('REP'))
    
    .addBands(image.expression('(red-blue)/red1',{
      'red': image.select('red'),
      'red1': image.select('red1'), 
      'blue': image.select('blue'), 
    }).toDouble().rename('PSRI'))
    
    .addBands(image.expression('red1/nir',{
      'red1': image.select('red1'),
      'nir': image.select('nir'),
    }).toDouble().rename('CRE'))

    // add a doy band.
    .addBands(ee.Image(DOY).rename('DOY').toDouble())
    // add a year band.
    .addBands(ee.Image(year).rename('Year').toDouble())
    
    .set('DOY',DOY)
};

// Function to merge bands
var mergeBands = function(image, previous) {
  return ee.Image(previous).addBands(image);
};