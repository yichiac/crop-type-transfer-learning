// Crop map generation
// Take Sanjiang Plain (SJ) in 2019 as an example

var s2Tools = require("users/nanshany1993/common:sentinel2");
var id = 1
var fenqu = ee.FeatureCollection("users/nanshany1993/cropNE/vectors/NE84-fenqu")
var bands = ee.List(['red2','swir1','swir2','NDVI','EVI','LSWI','NDSVI','NDTI','RENDVI','REP'])  // 10 index
var aoi = fenqu.filter(ee.Filter.eq('Id',id))

// Step 1: Construct feature candicates from Sentinel-2 images
var startDay = ee.Date.fromYMD(year,1,1)
var endDay = ee.Date.fromYMD(year+1,1,1)
var s2 = ee.ImageCollection("COPERNICUS/S2")
  .filterBounds(region)
  .filterDate(startDay,endDay)
  .map(sentinel2toa)
  .map(addVariables) 
  .map(addTimeBands)
  .map(cloudMask)
var s2filtered = s2.select(bands)

// 10-day time series via three steps
// 1) 10-day composite
var startDoy = startDay.getRelative('day','year')
var endDoy = endDay.advance(-1,'day').getRelative('day','year')
var starts = ee.List.sequence(startDoy, endDoy, 10)
var composites = ee.ImageCollection(starts.map(function(start) {
  var doy = start
  var filtered = s2filtered.filter(ee.Filter.dayOfYear(start, ee.Number(start).add(10))).median().clip(region)
  var bandLength = filtered.bandNames().length()
  var mask = ee.Algorithms.If({                   // mask must be done for time band
    condition : ee.Number(bandLength).gt(0),
    trueCase : filtered.select(0).mask(),
    falseCase : ee.Image(0).clip(region)    
  })
  return filtered.addBands(ee.Image.constant(doy).rename('doy').float())
                .updateMask(mask)
                .set('system:time_start',ee.Date.fromYMD(year,1,1).advance(doy,'day').millis())
                .set('doy',doy)
                .set('length',bandLength)   
  }));
// 2) Linear interpolation --------------------------------------------
var size = composites.size()
var LIC = composites.toList(size)
var interpolated = ee.ImageCollection(ee.List.sequence(9,30,1).map(function(i){
  var i = ee.Number(i)
  var before = ee.ImageCollection.fromImages(LIC.slice(i.subtract(9),i))
    .filter(ee.Filter.gt('length',0)).mosaic()
  var after = ee.ImageCollection.fromImages(LIC.slice(i.add(1),i.add(10)).reverse())
    .filter(ee.Filter.gt('length',0)).mosaic()
  var boforeY = before.select(bands)
  var beforedoy = before.select('doy')
  var afterY = after.select(bands)
  var afterdoy = after.select('doy')
  var targetImg = ee.Image(LIC.get(i))
  var currentdoy = ee.Image.constant(targetImg.get('doy')).float();
  var Y = afterY.subtract(boforeY).divide(afterdoy.subtract(beforedoy))
      .multiply(currentdoy.subtract(beforedoy)).add(boforeY)
  var filledImage = ee.Image(ee.Algorithms.If({
    condition : ee.Number(targetImg.get('length')).gt(0), 
    trueCase : targetImg.select(bands).unmask(Y),
    falseCase : Y
  }));
  return filledImage.unmask(0).clip(region)
    .set('system:time_start',targetImg.get('system:time_start'),'doy',targetImg.get('doy')) // can not simply copy all properties of composites
}))  
// 3) SG smoothing --------------------------------------------
var window_size = 7
var order = 3
var sgs = s2Tools.sgsmooth(interpolated,bands, order, window_size)
var day10s = ee.Image(sgs.iterate(mergeBands, ee.Image([]))).addBands(NDVIs).addBands(LSWIs)

// NDVI/LSWI maximum composite
var NDVIs = sgs.qualityMosaic('NDVI')
var LSWIs = sgs.qualityMosaic('LSWI')

// harmonic regression
// y = a + b1*cos(3pi*t) + b2*sin(3pi*t) + b3*cons(6pi*t) +b4*sin(6pi*t) 
var dependent = ee.List(['NDVI','EVI','LSWI'])
var harmonicIndependents = ee.List(['constant', 'cos3', 'sin3', 'cos6' , 'sin6']);
// The output of the regression reduction is a [X,Y] array image.
var harmonic = s2
  .select(harmonicIndependents.cat(dependent))
  .reduce(ee.Reducer.linearRegression(harmonicIndependents.length(), dependent.length()));
var coefficients = harmonic.select('coefficients').matrixTranspose()
  .arrayFlatten([dependent,harmonicIndependents]).clip(region);  

// merge all
// 10-day time seris  10*22=220
// NDVI/LSWI composite 10*2=20
// harmonic coefficients 3*5=15
// in sum 255
var finalImage = day10s.addBands(coefficients).updateMask(cropland.clip(region)).clip(region)
print('finalImage',finalImage,10*24+15) // 255


// Step 2: Train the classifier using the training samples and selected features
// trainTables is the training dataset, which contains the crop type and Sentinel-2 features of each crop training sample
var trainTables  = ee.FeatureCollection("users/nanshany1993/CDL/tables/crop/combinedCropTable")
var trainTable = trainTables.filterBounds(aoi)
var cropFeatures = ['swir1_6', 'LSWI_4', 'swir2_5', 'LSWI_6', 'REP_11', 'REP_12', 'REP_23', 'REP_13', 'REP_14', 'REP_16', 'RENDVI_22', 'swir2_22', 'LSWI_10', 'NDTI_4', 'RENDVI_23', 'REP_9', 'LSWI_12', 'swir1_22', 'LSWI_9']
// train the classifier
var cropRF = ee.Classifier.randomForest({
  numberOfTrees: 200,
  minLeafPopulation: 1, 
  seed: 999})
var classifier = cropRF.train({
  features:trainTable,
  classProperty:'crop',
  inputProperties:cropFeatures,
})

// Step 3: classify the image with trained classifier and output
var classified = finalImage.select(cropFeatures).classify(classifier).uint8()
var label = 'crop_' + fenqu_id.toString()
Export.image.toAsset({
  image: classified,
  description: label,
  assetId: 'users/nanshany1993/CDL/images/'+label,
  scale: 10,
  region: region,  
  maxPixels : 1e13
});

//////////////// Functions //////////////////////////////////////////
// rename Sentinel-2 bands
// set necessary properties
function sentinel2toa (img){
  return img.select(
                      ['B1','B2','B3','B4','B5','B6','B7','B8','B8A','B9','B10', 'B11','B12','QA60']
                      ,['aerosol', 'blue', 'green', 'red','red1','red2','red3','nir','red4','h2o', 'cirrus','swir1', 'swir2','QA60']
                    )
                    .divide(10000).toDouble()
                    .set('solar_azimuth',img.get('MEAN_SOLAR_AZIMUTH_ANGLE'))
                    .set('solar_zenith',img.get('MEAN_SOLAR_ZENITH_ANGLE') )
                    .set('system:time_start',img.get('system:time_start'));
}

// function to get cloud score
// simply the cloud_and_shadow_mask
function cloudMask(toa) {
  // authors: Matt Hancher, Chris Hewig and Ian Housman
  
  function rescale(img, thresholds) {
    return img.subtract(thresholds[0]).divide(thresholds[1] - thresholds[0]);
  }
  
  // Compute several indicators of cloudyness and take the minimum of them.
  var score = ee.Image(1);
  
  //Clouds are reasonably bright
  score = score.min(rescale(toa.select(['blue']), [0.1, 0.5]));
  score = score.min(rescale(toa.select(['aerosol']), [0.1, 0.3]));
  score = score.min(rescale(toa.select(['aerosol']).add(toa.select(['cirrus'])), [0.15, 0.2]));
  score = score.min(rescale(toa.select(['red']).add(toa.select(['green'])).add(toa.select('blue')), [0.2, 0.8]));

  //Clouds are moist
  var ndmi = toa.normalizedDifference(['red4','swir1']);
  score=score.min(rescale(ndmi, [-0.1, 0.1]));
  
  // However, clouds are not snow.
  var ndsi = toa.normalizedDifference(['green', 'swir1']);
  score=score.min(rescale(ndsi, [0.8, 0.6]));
  
  // a (somewhat arbitrary) threshold 
  var cloudScoreThreshold = 0.2;
  var cloud = score.gt(cloudScoreThreshold);
  
  var mask = cloud.eq(0);
  return toa.updateMask(mask);
} 

// Use this function to add several indices to Sentinel-2 imagery.
var addVariables = function(image) {
  var DOY = image.date().getRelative('day', 'year')
  var year = image.date().get('year')
  
  return image
    // Add a NDVI band.
    .addBands(image.normalizedDifference(['nir', 'red']).toDouble().rename('NDVI'))
    // Add a EVI band.
    .addBands(image.expression('2.5*((nir-red)/(nir+6*red-7.5*blue+1))', {
      'nir':image.select('nir'),
      'red':image.select('red'),
      'blue':image.select('blue')
    }).toDouble().rename('EVI'))
    // Add a GCVI: Green Chlorophyll Vegetation Index (Guan Kaiyu, Wang Sherrie)
    .addBands(image.expression('nir/green-1',{
      'nir': image.select('nir'),
      'green': image.select('green'),
    }).toDouble().rename('GCVI'))
    // Add a MSAVI2: Modified Soil-adjusted Vegetation Index (Qi et al. (1994b))
    .addBands(image.expression('1/2 * (2*nir + 1 - ((2*nir+1)**2 - 8*(nir-red))**(1/2))',{
      'nir': image.select('nir'),
      'red': image.select('red'),
    }).toDouble().rename('MSAVI2'))  
    
    // Add a LSWI band.
    .addBands(image.normalizedDifference(['nir','swir1']).toDouble().rename('LSWI'))
    // Add a NDWI band.
    .addBands(image.normalizedDifference(['green','nir']).toDouble().rename('NDWI'))
    // Add a NDSI band.
    .addBands(image.normalizedDifference(['green','swir1']).toDouble().rename('NDSI'))
    
    // Add NDSVI: normalized differential senescent vegetation index (Zhong,2014)
    .addBands(image.normalizedDifference(['swir1','red']).toDouble().rename('NDSVI'))
    // Add NDTI: normalized differential tillage index, relates to residue cover (Zhong,2014)
    .addBands(image.normalizedDifference(['swir1','swir2']).toDouble().rename('NDTI'))
    
    // Add S2 red-edge indices (Sen2-Agri)
    // RENDVI = (nir-red2)/(nir+red2)
    // REP = {705+35*(0.5*(red3+red)-red1)/(red2-red1)}/1000
    // PSRI = (red-blue)/red1
    // CRE = red1/nir
    .addBands(image.normalizedDifference(['nir','red2']).toDouble().rename('RENDVI'))
    
    .addBands(image.expression('(705+35*(0.5*(red3+red)-red1)/(red2-red1))/1000',{
      'red3' : image.select('red3'),
      'red2' : image.select('red2'),
      'red1' : image.select('red1'),
      'red' : image.select('red'),
    }).toDouble().rename('REP'))
    
    .addBands(image.expression('(red-blue)/red1',{
      'red': image.select('red'),
      'red1': image.select('red1'), 
      'blue': image.select('blue'), 
    }).toDouble().rename('PSRI'))
    
    .addBands(image.expression('red1/nir',{
      'red1': image.select('red1'),
      'nir': image.select('nir'),
    }).toDouble().rename('CRE'))

    // add a doy band.
    .addBands(ee.Image(DOY).rename('DOY').toDouble())
    // add a year band.
    .addBands(ee.Image(year).rename('Year').toDouble())
    
    .set('DOY',DOY)
};